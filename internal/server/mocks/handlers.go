// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go
//
// Generated by this command:
//
//	mockgen -source=handlers.go -destination=mocks/handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUrlProvider is a mock of UrlProvider interface.
type MockUrlProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUrlProviderMockRecorder
	isgomock struct{}
}

// MockUrlProviderMockRecorder is the mock recorder for MockUrlProvider.
type MockUrlProviderMockRecorder struct {
	mock *MockUrlProvider
}

// NewMockUrlProvider creates a new mock instance.
func NewMockUrlProvider(ctrl *gomock.Controller) *MockUrlProvider {
	mock := &MockUrlProvider{ctrl: ctrl}
	mock.recorder = &MockUrlProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlProvider) EXPECT() *MockUrlProviderMockRecorder {
	return m.recorder
}

// DeleteURL mocks base method.
func (m *MockUrlProvider) DeleteURL(alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockUrlProviderMockRecorder) DeleteURL(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockUrlProvider)(nil).DeleteURL), alias)
}

// GetURL mocks base method.
func (m *MockUrlProvider) GetURL(alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockUrlProviderMockRecorder) GetURL(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockUrlProvider)(nil).GetURL), alias)
}

// SaveURL mocks base method.
func (m *MockUrlProvider) SaveURL(urlToSave, alias string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", urlToSave, alias)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockUrlProviderMockRecorder) SaveURL(urlToSave, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockUrlProvider)(nil).SaveURL), urlToSave, alias)
}

// UpdateAlias mocks base method.
func (m *MockUrlProvider) UpdateAlias(oldAlias, newAlias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlias", oldAlias, newAlias)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlias indicates an expected call of UpdateAlias.
func (mr *MockUrlProviderMockRecorder) UpdateAlias(oldAlias, newAlias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlias", reflect.TypeOf((*MockUrlProvider)(nil).UpdateAlias), oldAlias, newAlias)
}
